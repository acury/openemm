/*doc
---
title: Forms
name: forms
category: CSS - Forms
---
*/

/*doc
---
title: Basic Example
name: forms_01_example
parent: forms
---

By default all forms are horizontally aligned and start stacking vertically for tablets and below.
`.form-group`s provide vertical spacing and act like grid rows.

`.form-control` should be added to any `<input>`, `<textarea>` or `<select>` to set it to `width: 100%;`.

Alignment and size of form elements should be controlled by the usage of wrapping `.col-` elements.

The label requires the class `.control-label`.

```htmlexample
<form>
    <div class="form-group">
        <div class="col-sm-4">
            <label for="input1" class="control-label">
                E-Mail
                <button class="icon icon-help" data-help="(insert target help message xml here)" tabindex="-1" type="button"></button>
            </label>
        </div>
        <div class="col-sm-8">
            <input type="text" class="form-control" id="input1" placeholder="Enter E-Mail">
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-4">
            <label for="input2" class="control-label">
              Password
              <button class="icon icon-help" data-help="(insert target help message xml here)" tabindex="-1" type="button"></button>
            </label>
        </div>
        <div class="col-sm-8">
            <input type="password" class="form-control" id="input2" placeholder="Enter Password">
            <p class="help-block">Example block-level help text here.</p>
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-offset-4 col-sm-8">
            <div class="checkbox">
                <label>
                    <input type="checkbox"> Remember me
                </label>
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-offset-4 col-sm-8">
            <button type="submit" class="btn btn-regular btn-primary">Sign in</button>
        </div>
    </div>
</form>
```

*/

/*doc
---
title: Vertical Form
name: forms_02_vertical
parent: forms
---

For vertical alignment the `.form-vertical` modifier is provided.

`.form-group`s no longer act like grid rows, which means the default of using a combination of `.row` and `.col-` elements is required around them.

Note that it is not required for the modifier to be applied to a `<form>` element specifically - any wrapping element will suffice, so you could theoretically have horizontally and vertically aligned elements in a single form, although that is not suggested.

```htmlexample
<form class="form-vertical">
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
              <label for="input3" class="control-label">E-Mail</label>
              <input type="text" class="form-control" id="input3" placeholder="Enter E-Mail">
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
              <label for="input4" class="control-label">Password</label>
              <input type="password" class="form-control" id="input4" placeholder="Enter Password">
            </div>
        </div>

        <div class="col-sm-12">
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input type="checkbox"> Remember me
                    </label>
                </div>
            </div>
        </div>

        <div class="col-sm-6">
            <button type="submit" class="btn btn-regular btn-primary">Sign in</button>
        </div>
    </div>
</form>
```

*/


/*doc
---
title: Supported Controls
name: forms_03_supported_controls
parent: forms
---

Examples of supported standard form controls.

*/

/*doc
---
title: Inputs
name: forms_04_inputs
parent: forms_03_supported_controls
---

Most common, the text-based input field.

Supports all HTML5 types: `text`, `password`, `datetime`, `datetime-local`, `date`, `month`, `time`, `week`, `number`, `email`, `url`, `search`, `tel`, and `color`.

```htmlexample
<input type="text" class="form-control" placeholder="Text input">
```

*/

/*doc
---
title: Textarea
name: forms_05_textarea
parent: forms_03_supported_controls
---

Supports multiple lines of text. Height of input area can be controlled via the `rows` attribute.

```htmlexample
<textarea class="form-control" rows="3"></textarea>
```
*/

/*doc
---
title: Checkboxes & Radios
name: forms_06_checkboxes_radios
parent: forms_03_supported_controls
---

Checkboxes are for selecting one or several options in a list, while radios are for selecting one option from many.

`.checkbox`, `.checkbox-inline`, `.radio` and `.radio-inline` elements support the `.disabled` modifier.
`.disabled` will effectively disable the ability to interact with them.

Please note: This doesn't work in IE8-10 and you should additionally set the `disabled` attribute on the corresponding `input`.


```htmlexample
<div class="checkbox">
    <label>
        <input type="checkbox" />
        Option one
    </label>
</div>
<div class="checkbox disabled">
    <label>
        <input type="checkbox" disabled />
        This option is disabled
    </label>
</div>

<div class="radio">
    <label>
        <input type="radio" name="optionsRadios" checked />
        Option one
    </label>
</div>
<div class="radio">
    <label>
        <input type="radio" name="optionsRadios" />
        Option two
    </label>
</div>
<div class="radio disabled">
    <label>
        <input type="radio" name="optionsRadios" disabled />
        Option three is disabled
    </label>
</div>
```
*/

/*doc
---
title: Inline Checkboxes & Radios
name: forms_07_inline_checkboxes_radios
parent: forms_03_supported_controls
---

Use the `.checkbox-inline` or `.radio-inline` classes on a series of checkboxes or radios for controls that appear on the same line.

```htmlexample
<div>
    <label class="checkbox-inline">
        <input type="checkbox"> 1
    </label>
    <label class="checkbox-inline">
        <input type="checkbox"> 2
    </label>
    <label class="checkbox-inline">
        <input type="checkbox"> 3
    </label>
</div>

<div>
    <label class="radio-inline">
        <input type="radio"> 1
    </label>
    <label class="radio-inline">
        <input type="radio"> 2
    </label>
    <label class="radio-inline">
        <input type="radio"> 3
    </label>
</div>
```

*/


/*doc
---
title: Selects
name: forms_09_selects
parent: forms_03_supported_controls
---

Use the default or add the `multiple` attribute for multiple options.

```htmlexample
<select class="form-control">
    <option>1</option>
    <option>2</option>
    <option>3</option>
    <option>4</option>
    <option>5</option>
</select>

<select multiple class="form-control">
    <option>1</option>
    <option>2</option>
    <option>3</option>
    <option>4</option>
    <option>5</option>
</select>
```
*/

/*doc
---
title: Static control
name: forms_10_static_control
parent: forms_03_supported_controls
---

For when you need to use plain text next to a form label, use `.form-control-static` on a `<p>`.

```htmlexample
<form>
    <div class="form-group">
        <div class="col-sm-4">
            <label class="control-label">E-Mail</label>
        </div>
        <div class="col-sm-8">
            <p class="form-control-static">email@example.com</p>
        </div>
        <div class="col-sm-4">
            <label class="control-label">Password</label>
        </div>
        <div class="col-sm-8">
            <input type="password" class="form-control" />
        </div>
    </div>
</form>
```
*/

/*doc
---
title: Disabled inputs
name: forms_10_disabled_input
parent: forms
---

Add the `disabled` attribute to prevent user interaction.

```htmlexample
<input type="text" class="form-control" placeholder="Disabled input" disabled />
```
*/

/*doc
---
title: Validation States
name: forms_11_validation_states
parent: forms
---

The usual validation states are supported for inputs. Apply `.has-success`, `.has-info`, `.has-warning` or `.has-alert` to the parent element. Any `.control-label`, `.form-control` and `.help-block` inside will receive the appropriate styling.

```htmlexample
<div class="form-group has-success">
    <div class="col-sm-4">
        <label class="control-label" for="inputSuccess1">has-success</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputSuccess1" value="Text">
    </div>
</div>

<div class="form-group has-info">
    <div class="col-sm-4">
        <label class="control-label" for="inputInfo1">has-info</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputInfo1" value="Text">
    </div>
</div>

<div class="form-group has-warning">
    <div class="col-sm-4">
        <label class="control-label" for="inputWarning1">has-warning</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputWarning1" value="Text">
    </div>
</div>

<div class="form-group has-alert">
    <div class="col-sm-4">
        <label class="control-label" for="inputAlert1">has-alert</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputAlert1" value="Text">
    </div>
</div>
```

*/


/*doc
---
title: With icons & messages
name: forms_12_validation_states_icons
parent: forms_11_validation_states
---

For extra emphasis add `.has-feedback` together with extra markup to display an icon as well as a message.

Note: You should leave out the icon when using this for `<select>` as the icon may overlap the dropdown arrow.


```htmlexample
<div class="form-group has-success has-feedback">
    <div class="col-sm-4">
        <label class="control-label" for="inputSuccess2">has-success has-feedback</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputSuccess2" value="Text">
        <span class="icon icon-state-success form-control-feedback"></span>
        <div class="form-control-feedback-message">Nicely done.</div>
    </div>
</div>

<div class="form-group has-info has-feedback">
    <div class="col-sm-4">
        <label class="control-label" for="inputInfo2">has-info has-feedback</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputInfo2" value="Text">
        <span class="icon icon-state-info form-control-feedback"></span>
        <div class="form-control-feedback-message">This field contains important information.</div>
    </div>
</div>

<div class="form-group has-warning has-feedback">
    <div class="col-sm-4">
        <label class="control-label" for="inputWarning2">has-warning has-feedback</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputWarning2" value="Text">
        <span class="icon icon-state-warning form-control-feedback"></span>
        <div class="form-control-feedback-message">Any changes to this field may have unwanted side-effects.</div>
    </div>
</div>

<div class="form-group has-alert has-feedback">
    <div class="col-sm-4">
        <label class="control-label" for="inputError2">has-alert has-feedback</label>
    </div>
    <div class="col-sm-8">
        <input type="text" class="form-control" id="inputError2" value="Text">
        <span class="icon icon-state-alert form-control-feedback"></span>
        <div class="form-control-feedback-message">Please enter the required information.</div>
    </div>
</div>
```
*/

/*doc
---
title: Icons
name: forms_13_icons
parent: forms
---

Use `.has-icon` and `.form-control-icon` (just like `.has-feedback` and `.form-control-feedback`) to display an icon at the left side of a control.

```htmlexample
<div class="form-group has-icon">
  <input type="text" class="form-control rounded" placeholder="Search">
  <i class="form-control-icon icon icon-search"></i>
</div>

<div class="form-group">
  <div class="col-sm-4">
    <label class="control-label" for="formGroupInputHasIcon">Search</label>
  </div>

  <div class="col-sm-8 has-icon">
    <input type="text" id="formGroupInputHasIcon" class="form-control">
    <i class="form-control-icon icon icon-search"></i>
  </div>
</div>
```

*/

/*doc
---
title: Sizes
name: forms_14_sizes
parent: forms
---

Add `.input-lg` or `.input-sm` to any `.form-control` to make it larger / smaller respectively. The sizes will accurately match up with `.btn` sizes.

```htmlexample
<input class="form-control input-lg" type="text" placeholder=".input-lg">
<input type="text" class="form-control" placeholder="Default input">
<input class="form-control input-sm" type="text" placeholder=".input-sm">

<select class="form-control input-lg">
    <option>.input-lg</option>
</select>

<select class="form-control">
    <option>default</option>
</select>

<select class="form-control input-sm">
    <option>.input-sm</option>
</select>

```
*/

/*doc
---
title: Form Group Sizes
name: forms_15_form_group_sizes
parent: forms_14_sizes
---

Add `.form-group-lg` or `.form-group-sm` to a `.form-group` to size single or multiple inputs quickly.

```htmlexample
<form>
    <div class="form-group form-group-lg">
        <div class="col-sm-4">
            <label class="control-label">Label</label>
        </div>
        <div class="col-sm-3">
            <input class="form-control" type="text" placeholder="Large input">
        </div>
        <div class="col-sm-3">
            <input class="form-control" type="text" placeholder="Large input">
        </div>
        <div class="col-sm-2">
            <input class="form-control" type="text" placeholder="Large input">
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-4">
          <label class="control-label" for="formGroupInputDefault">Label</label>
        </div>
        <div class="col-sm-8">
            <input class="form-control" type="text" id="formGroupInputDefault" placeholder="Default input">
        </div>
    </div>

    <div class="form-group form-group-sm">
        <div class="col-sm-4">
          <label class="control-label" for="formGroupInputSmall">Label</label>
        </div>
        <div class="col-sm-8">
            <input class="form-control" type="text" id="formGroupInputSmall" placeholder="Small input">
        </div>
    </div>
</form>

```
*/

/*doc
---
title: Column sizing
name: forms_16_column_sizes
parent: forms_14_sizes
---

Always wrap labels and inputs in grid columns to enforce widths.

Note: Keep in mind, `.form-vertical` requires a completely different markup - see the section about Vertical Forms.

```htmlexample
<div class="form-group">
    <div class="col-sm-3">
        <label class="control-label">col-sm-3</label>
    </div>
    <div class="col-sm-2">
        <input class="form-control" type="text" placeholder="col-sm-2">
    </div>
    <div class="col-sm-3">
        <input class="form-control" type="text" placeholder="col-sm-3">
    </div>
    <div class="col-sm-4">
        <input class="form-control" type="text" placeholder="col-sm-4">
    </div>
</div>
```
*/

/*doc
---
title: Help text
name: forms_17_help_text
parent: forms
---

Block level help text for form controls.

Use a `<span>` or `<p>` element with `.help-block` to create a text element that flows with the `.form-control` and can span multiple lines.

```htmlexample
<div class="form-group">
    <div class="col-sm-4">
        <label class="control-label">Label</label>
    </div>
    <div class="col-sm-8">
        <input class="form-control" type="text" />
        <p class="help-block">
          A block of text that can span multiple lines.
          Lorem ipsum dolor sit amet, consetetur sadipscing elitr,
          sed diam nonumy eirmod tempor invidunt ut labore et dolore
          magna aliquyam erat, sed diam voluptua.
        </p>
    </div>
</div>
```
*/


//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: bold;
  font-size: $fs-small;
  line-height: 20px;
  color: $c-gray-55;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  height: 30px; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: 5px 10px;
  font-size: $fs-regular;
  line-height: 20px;
  color: $c-black-82;
  background-color: $c-white;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $c-gray-20;
  border-radius: 2px;
  @include box-shadow(inset 0px 1px 1px -1px rgba(0, 0, 0, 0.4));
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  @include placeholder();

  &.enableable {
    cursor: pointer;
    background-color: $c-gray-11;

    &:hover {
      background-color: $c-gray-02;
    }

    &:focus {
      background-color: $c-white;
    }
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: $c-gray-11;
    opacity: 1; // iOS fix for unreadable disabled content
  }

  &.rounded {
    border-radius: 15px;
  }

  // [converter] extracted textarea& to textarea.form-control
}

body.dark-theme .form-control {
  &:not(.ace_editor) {
    color: $c-dt-input-text;
    background-color: $c-dt-input-background;
  }
  border-color: $c-dt-input-border;

  @include form-control-focus($c-dt-input-focus);

  &:disabled,
  &[readonly] {
    background-color: $c-dt-input-disabled-background;
  }
}

.form-control-small {
  @extend .form-control;

  width: auto;
  float: left;
}

.form-control-small + .form-control-small{
  margin-left: 10px;
}

.form-control-unstyled {
  @include box-shadow(none);
  border-color: $c-transparent;
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned.
// As a workaround, we set a pixel line-height that matches the
// given height of the input. Since this fucks up everything else, we have to
// appropriately reset it for Internet Explorer and the size variations.

input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
  line-height: 30px;
  // IE8+ misaligns the text within date inputs, so we reset
  line-height: 20px \0;

  &.input-sm {
    line-height: 20px;
  }
  &.input-lg {
    line-height: 40px;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group-header {
  @extend .form-group;
  display: flex;
  align-items: center;
  float: right;
}

.form-group {
  margin-bottom: 10px;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  min-height: 20px; // clear the floating input if there is no label text
  margin-top: 10px;
  margin-bottom: 10px;

  label {
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Elements, radios and checkboxes on same line
.element-inline,
.radio-inline,
.checkbox-inline {
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: not-allowed;
    }
  }
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  // Size it appropriately next to real form controls
  padding-top: (5px + 1);
  padding-bottom: (5px + 1);
  // Remove default margin from `p`
  margin-bottom: 0;

  &.input-lg,
  &.input-sm {
    padding-left: 0;
    padding-right: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
// input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius)


@include input-size('.input-sm', 20px, 3px, 5px, $fs-tiny, 14px, 2px);

@include input-size('.input-lg', 40px, 10px, 15px, $fs-large, 20px, 2px);


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: (30px * 1.25);
  }
}
// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
  position: absolute;
  top: (20px + 5); // Height of the `label` and its margin
  right: 0;
  z-index: 2; // Ensure icon is above input groups
  display: block;
  width: 30px;
  height: 30px;
  line-height: 30px;
  text-align: center;
}
.input-lg + .form-control-feedback {
  width: 40px;
  height: 40px;
  line-height: 40px;
}
.input-sm + .form-control-feedback {
  width: 20px;
  height: 20px;
  line-height: 20px;
}

.form-control-feedback-message {
  margin-top: -1px;
  padding: 5px 8px;
  font-size: $fs-small;
  line-height: 1.5;
  font-weight: $fw-regular;
  color: $c-white;

  @include border-bottom-radius(2px);
}

// Feedback states
// form-control-validation($text-color, $border-color, $background-color)

@each $conf in $states {
  $state: nth($conf, 1);
  $color: nth($conf, 2);

  .has-#{$state} {
    @include form-control-validation($color, $color, darken($color, 10%));

    .form-control-feedback-message { background-color: $color; }
  }
}


// Reposition feedback icon if label is hidden with "screenreader only" state
.has-feedback label.sr-only ~ .form-control-feedback {
  top: 0;
}


// Form control icons
//
// Show a left-aligned icon for individual form controls.

.has-icon {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-left: 30px;

    &.rounded {
      padding-left: (30px + 3px);
    }
  }
}
// Feedback icon (requires .glyphicon classes)
.form-control-icon {
  position: absolute;
  top: (20px + 5); // Height of the `label` and its margin
  z-index: 2; // Ensure icon is above input groups
  display: block;
  width: 30px;
  height: 30px;
  line-height: 30px;
  text-align: center;
  color: $c-gray-33;
}
.input-lg + .form-control-icon {
  width: 40px;
  height: 40px;
  line-height: 40px;
}
.input-sm + .form-control-icon {
  width: 20px;
  height: 20px;
  line-height: 20px;
}

.has-icon .form-control-icon {
  top: 0;
}

.has-icon .form-control.rounded ~ .form-control-icon {
  padding-left: 3px;
}

// Reposition icon if label is hidden with "screenreader only" state
.has-feedback label.sr-only ~ .form-control-icon {
  top: 0;
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  font-size: $fs-small;
  font-weight: $fw-regular;
  color: $c-gray-55;
}

body.dark-theme .help-block {
  color: $c-dt-input-label;
}

.control-label {
  width: 100%;
}

body.dark-theme label {
  color: $c-dt-input-label;
}


// ATTENTION: FORMS MADE HORIZONTAL BY DEFAULT!

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

// .form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .element-inline,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: (5px + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: (20px + (5px + 1));
  }

  // Make form groups behave like rows
  .form-group {
    @include make-row();
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: $screen-sm-min) {
    .control-label {
      text-align: right;
      margin-bottom: 0;
      padding-top: 5px; // Default padding plus a border
    }
  }

  // Use left align labels
  @media (min-width: $screen-sm-min) {
    .control-label-left .control-label {
      text-align: left;
      margin-bottom: 0;
      padding-top: 5px; // Default padding plus a border
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.

  //
  .has-feedback .form-control-feedback {
    top: 0;
    right: ($grid-gutter-width / 2);
  }

  .has-feedback .input-group .form-control-feedback {
    right: 0;
  }

  // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: $screen-sm-min) {
      .control-label {
        padding-top: 10px;
      }
    }
    .form-control {
      @extend .input-lg;
    }
  }
  .form-group-sm {
    @media (min-width: $screen-sm-min) {
      .control-label {
        padding-top: 0;
      }
    }
    .form-control {
      @extend .input-sm;
    }
  }
// }


// By default bootstrap has a form-horizontal modifier which makes form-groups behave like .row's. Since for most cases our forms are horizontal, the default is reversed and overrides for form-vertical occur here which remove that behaviour

.form-vertical {
  .form-group {
    margin-left: 0;
    margin-right: 0;
    margin-bottom: 15px;
  }

  @media (min-width: $screen-sm-min) {
    .control-label {
      text-align: left;
      margin-bottom: 5px;
      padding-top: 0;
    }
  }
}

input[type="file"].form-control {
  &::-webkit-file-upload-button {
    margin-top: 1px;
    margin-left: 1px;
    padding: 4px 5px;
  }

  padding: 0;
  border: 0;

  @include box-shadow(inset 0 2px 1px -1px $c-gray-20, inset 0 0 0 1px $c-gray-20);

}

.checkbox-inline {
  .icon-stack {
    @include transition(color .15s ease-in-out);
  }

  input[type="checkbox"]:checked + .icon-stack {
    color: $c-state-success;
  }
}
